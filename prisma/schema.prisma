// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int      @id @default(autoincrement())
  name             String   @db.VarChar(100)
  email            String   @unique @db.VarChar(255)
  password         String   @db.VarChar(255)
  isActive         Boolean  @default(true)
  refreshTokenHash String?  @db.VarChar(255)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  role             Role?     @relation(fields: [role_id], references: [id])
  role_id          Int      @db.Integer()
  Profile          Profile?

   @@map("users6")
}

model Role {
  id         Int          @unique @default(autoincrement())
  name       String       @db.VarChar()
  created_at DateTime     @default(now())
  updated_at DateTime?    @updatedAt()
  deleted_at DateTime?    @db.Timestamp()
  Permission Permission[]
  User       User[]

  @@map("roles")
}

model Permission {
  id         Int     @unique @default(autoincrement())
  role       Role    @relation(fields: [role_id], references: [id])
  role_id    Int     @db.Integer()
  action     String  @db.VarChar()
  subject    String  @db.VarChar()
  inverted   Boolean @default(false)
  conditions Json?   @db.JsonB()
  reason     String? @db.Text()

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt()
  deleted_at DateTime? @db.Timestamp()

  @@map("permissions")
}

model Profile {
  id          Int      @id @default(autoincrement())
  bio         String?  @db.Text // Biografía opcional
  avatarUrl   String?  @db.VarChar(255) // URL de la imagen de perfil
  phoneNumber String?  @db.VarChar(20) // Número de teléfono opcional
  userId      Int      @unique // Relación con el usuario
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("profiles")
}
